# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
#    Python27:
#      python.version: '2.7'
#    Python35:
#      python.version: '3.5'
#    Python36:
#      python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Set Python version $(python.version)'

- script: python -m pip install --upgrade pip
  displayName: 'Update PIP'

- script: pip install gitdb2==3.0.0 trufflehog
  displayName: 'Install truffleHog'

#- script: cd $(System.DefaultWorkingDirectory); URI=$(Build.Repository.Uri); git clone $(echo $URI | awk -v pat=$REPO_PAT -F// '{print $1"//username:"pat"@"$2}') --no-checkout --branch master
#  displayName: 'Clone pipeline repo (no header for bitbucket)'

#- script: cd $(Pipeline.Workspace); AUTH=$(echo -n ":$REPO_PAT" | openssl base64 | tr -d '\n'); git -c http.$(Build.Repository.Uri).extraheader="AUTHORIZATION:basic $AUTH" clone $(Build.Repository.Uri) --no-checkout --branch $(Build.SourceBranchName)
#  displayName: 'Clone pipeline repo'

#- script: cd $(Build.Repository.LocalPath); git log -p -10
#  displayName: 'Display build repo'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'cd $(System.DefaultWorkingDirectory); git switch $(Build.SourceBranchName); trufflehog --regex --entropy=False .'
    failOnStderr: false
  continueOnError: true

#- bash: cd $(System.DefaultWorkingDirectory); git switch $(Build.SourceBranchName); trufflehog --regex --entropy=False .
#  failOnStderr: false 
#- script: trufflehog --regex --entropy=True $(Pipeline.Workspace)/demo
#- script: trufflehog --regex --entropy=True $(Build.Repository.LocalPath)
  displayName: 'Scan cloned pipeline repo for secrets using truffleHog'

#- script: pip install gittyleaks
#  displayName: 'Install gittyleaks'

#- script: cd $(Build.Repository.LocalPath);[[ $(gittyleaks | tee output.txt | egrep -v '(^-|^\s)' | wc -l) -gt 0 ]] && { cat output.txt; exit 1; }
#  displayName: 'Scan pipeline repo for secrets using gittyleaks'